// Code generated by 'sqgen-postgres functions'; DO NOT EDIT.
package tables

import (
	sq "github.com/bokwoon95/go-structured-query/postgres"
)

// FUNCTION_ACCEPT_APPLICATION references the app.accept_application function.
type FUNCTION_ACCEPT_APPLICATION struct {
	*sq.FunctionInfo
	TEAM_ID           sq.NumberField
	STUDENT_USER_ID_1 sq.NumberField
	STUDENT_USER_ID_2 sq.NumberField
}

// ACCEPT_APPLICATION creates an instance of the app.accept_application function.
func ACCEPT_APPLICATION(
	arg_application_id int,
	arg_default_name string,
) FUNCTION_ACCEPT_APPLICATION {
	return ACCEPT_APPLICATION_(arg_application_id, arg_default_name)
}

// ACCEPT_APPLICATION_ creates an instance of the app.accept_application function.
func ACCEPT_APPLICATION_(
	arg_application_id interface{},
	arg_default_name interface{},
) FUNCTION_ACCEPT_APPLICATION {
	f := FUNCTION_ACCEPT_APPLICATION{FunctionInfo: &sq.FunctionInfo{
		Schema:    "app",
		Name:      "accept_application",
		Arguments: []interface{}{arg_application_id, arg_default_name},
	}}
	f.TEAM_ID = sq.NewNumberField("_team_id", f.FunctionInfo)
	f.STUDENT_USER_ID_1 = sq.NewNumberField("_student_user_id_1", f.FunctionInfo)
	f.STUDENT_USER_ID_2 = sq.NewNumberField("_student_user_id_2", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_ACCEPT_APPLICATION) As(alias string) FUNCTION_ACCEPT_APPLICATION {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_CREATE_USER_ROLE references the app.create_user_role function.
type FUNCTION_CREATE_USER_ROLE struct {
	*sq.FunctionInfo
	USER_ID         sq.NumberField
	DISPLAYNAME     sq.StringField
	EMAIL           sq.StringField
	ROLES           sq.ArrayField
	ALREADY_CREATED sq.BooleanField
}

// CREATE_USER_ROLE creates an instance of the app.create_user_role function.
func CREATE_USER_ROLE(
	arg_cohort string,
	arg_role string,
	arg_displayname string,
	arg_email string,
) FUNCTION_CREATE_USER_ROLE {
	return CREATE_USER_ROLE_(arg_cohort, arg_role, arg_displayname, arg_email)
}

// CREATE_USER_ROLE_ creates an instance of the app.create_user_role function.
func CREATE_USER_ROLE_(
	arg_cohort interface{},
	arg_role interface{},
	arg_displayname interface{},
	arg_email interface{},
) FUNCTION_CREATE_USER_ROLE {
	f := FUNCTION_CREATE_USER_ROLE{FunctionInfo: &sq.FunctionInfo{
		Schema:    "app",
		Name:      "create_user_role",
		Arguments: []interface{}{arg_cohort, arg_role, arg_displayname, arg_email},
	}}
	f.USER_ID = sq.NewNumberField("_user_id", f.FunctionInfo)
	f.DISPLAYNAME = sq.NewStringField("_displayname", f.FunctionInfo)
	f.EMAIL = sq.NewStringField("_email", f.FunctionInfo)
	f.ROLES = sq.NewArrayField("_roles", f.FunctionInfo)
	f.ALREADY_CREATED = sq.NewBooleanField("_already_created", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_CREATE_USER_ROLE) As(alias string) FUNCTION_CREATE_USER_ROLE {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_IDEMPOTENT_CREATE_APPLICATION references the app.idempotent_create_application function.
type FUNCTION_IDEMPOTENT_CREATE_APPLICATION struct {
	*sq.FunctionInfo
	USER_ID        sq.NumberField
	USER_ROLE_ID   sq.NumberField
	APPLICATION_ID sq.NumberField
	MAGICSTRING    sq.StringField
}

// IDEMPOTENT_CREATE_APPLICATION creates an instance of the app.idempotent_create_application function.
func IDEMPOTENT_CREATE_APPLICATION(
	arg_displayname string,
	arg_email string,
) FUNCTION_IDEMPOTENT_CREATE_APPLICATION {
	return IDEMPOTENT_CREATE_APPLICATION_(arg_displayname, arg_email)
}

// IDEMPOTENT_CREATE_APPLICATION_ creates an instance of the app.idempotent_create_application function.
func IDEMPOTENT_CREATE_APPLICATION_(
	arg_displayname interface{},
	arg_email interface{},
) FUNCTION_IDEMPOTENT_CREATE_APPLICATION {
	f := FUNCTION_IDEMPOTENT_CREATE_APPLICATION{FunctionInfo: &sq.FunctionInfo{
		Schema:    "app",
		Name:      "idempotent_create_application",
		Arguments: []interface{}{arg_displayname, arg_email},
	}}
	f.USER_ID = sq.NewNumberField("_user_id", f.FunctionInfo)
	f.USER_ROLE_ID = sq.NewNumberField("_user_role_id", f.FunctionInfo)
	f.APPLICATION_ID = sq.NewNumberField("_application_id", f.FunctionInfo)
	f.MAGICSTRING = sq.NewStringField("_magicstring", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_IDEMPOTENT_CREATE_APPLICATION) As(alias string) FUNCTION_IDEMPOTENT_CREATE_APPLICATION {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_JOIN_APPLICATION references the app.join_application function.
type FUNCTION_JOIN_APPLICATION struct {
	*sq.FunctionInfo
	USER_ID        sq.NumberField
	USER_ROLE_ID   sq.NumberField
	APPLICATION_ID sq.NumberField
}

// JOIN_APPLICATION creates an instance of the app.join_application function.
func JOIN_APPLICATION(
	arg_displayname string,
	arg_email string,
	arg_magicstring string,
) FUNCTION_JOIN_APPLICATION {
	return JOIN_APPLICATION_(arg_displayname, arg_email, arg_magicstring)
}

// JOIN_APPLICATION_ creates an instance of the app.join_application function.
func JOIN_APPLICATION_(
	arg_displayname interface{},
	arg_email interface{},
	arg_magicstring interface{},
) FUNCTION_JOIN_APPLICATION {
	f := FUNCTION_JOIN_APPLICATION{FunctionInfo: &sq.FunctionInfo{
		Schema:    "app",
		Name:      "join_application",
		Arguments: []interface{}{arg_displayname, arg_email, arg_magicstring},
	}}
	f.USER_ID = sq.NewNumberField("_user_id", f.FunctionInfo)
	f.USER_ROLE_ID = sq.NewNumberField("_user_role_id", f.FunctionInfo)
	f.APPLICATION_ID = sq.NewNumberField("_application_id", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_JOIN_APPLICATION) As(alias string) FUNCTION_JOIN_APPLICATION {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_LEAVE_APPLICATION references the app.leave_application function.
type FUNCTION_LEAVE_APPLICATION struct {
	*sq.FunctionInfo
	USER_ID        sq.NumberField
	USER_ROLE_ID   sq.NumberField
	APPLICATION_ID sq.NumberField
	MAGICSTRING    sq.StringField
}

// LEAVE_APPLICATION creates an instance of the app.leave_application function.
func LEAVE_APPLICATION(
	arg_user_id int,
) FUNCTION_LEAVE_APPLICATION {
	return LEAVE_APPLICATION_(arg_user_id)
}

// LEAVE_APPLICATION_ creates an instance of the app.leave_application function.
func LEAVE_APPLICATION_(
	arg_user_id interface{},
) FUNCTION_LEAVE_APPLICATION {
	f := FUNCTION_LEAVE_APPLICATION{FunctionInfo: &sq.FunctionInfo{
		Schema:    "app",
		Name:      "leave_application",
		Arguments: []interface{}{arg_user_id},
	}}
	f.USER_ID = sq.NewNumberField("_user_id", f.FunctionInfo)
	f.USER_ROLE_ID = sq.NewNumberField("_user_role_id", f.FunctionInfo)
	f.APPLICATION_ID = sq.NewNumberField("_application_id", f.FunctionInfo)
	f.MAGICSTRING = sq.NewStringField("_magicstring", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_LEAVE_APPLICATION) As(alias string) FUNCTION_LEAVE_APPLICATION {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_SET_SESSION references the app.set_session function.
type FUNCTION_SET_SESSION struct {
	*sq.FunctionInfo
	USER_ID sq.NumberField
}

// SET_SESSION creates an instance of the app.set_session function.
func SET_SESSION(
	arg_hash string,
	arg_email string,
) FUNCTION_SET_SESSION {
	return SET_SESSION_(arg_hash, arg_email)
}

// SET_SESSION_ creates an instance of the app.set_session function.
func SET_SESSION_(
	arg_hash interface{},
	arg_email interface{},
) FUNCTION_SET_SESSION {
	f := FUNCTION_SET_SESSION{FunctionInfo: &sq.FunctionInfo{
		Schema:    "app",
		Name:      "set_session",
		Arguments: []interface{}{arg_hash, arg_email},
	}}
	f.USER_ID = sq.NewNumberField("_user_id", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_SET_SESSION) As(alias string) FUNCTION_SET_SESSION {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_UNDO_ACCEPT_APPLICATION references the app.undo_accept_application function.
type FUNCTION_UNDO_ACCEPT_APPLICATION struct {
	*sq.FunctionInfo
}

// UNDO_ACCEPT_APPLICATION creates an instance of the app.undo_accept_application function.
func UNDO_ACCEPT_APPLICATION(
	arg_application_id int,
) FUNCTION_UNDO_ACCEPT_APPLICATION {
	return UNDO_ACCEPT_APPLICATION_(arg_application_id)
}

// UNDO_ACCEPT_APPLICATION_ creates an instance of the app.undo_accept_application function.
func UNDO_ACCEPT_APPLICATION_(
	arg_application_id interface{},
) FUNCTION_UNDO_ACCEPT_APPLICATION {
	f := FUNCTION_UNDO_ACCEPT_APPLICATION{FunctionInfo: &sq.FunctionInfo{
		Schema:    "app",
		Name:      "undo_accept_application",
		Arguments: []interface{}{arg_application_id},
	}}
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_UNDO_ACCEPT_APPLICATION) As(alias string) FUNCTION_UNDO_ACCEPT_APPLICATION {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_UPDATE_TEAM references the app.update_team function.
type FUNCTION_UPDATE_TEAM struct {
	*sq.FunctionInfo
}

// UPDATE_TEAM creates an instance of the app.update_team function.
func UPDATE_TEAM(
	arg_team_id int,
	arg_status string,
	arg_team_name string,
	arg_project_level string,
	arg_student_user_id_1 int,
	arg_student_user_id_2 int,
	arg_adviser_user_id int,
	arg_mentor_user_id int,
) FUNCTION_UPDATE_TEAM {
	return UPDATE_TEAM_(arg_team_id, arg_status, arg_team_name, arg_project_level, arg_student_user_id_1, arg_student_user_id_2, arg_adviser_user_id, arg_mentor_user_id)
}

// UPDATE_TEAM_ creates an instance of the app.update_team function.
func UPDATE_TEAM_(
	arg_team_id interface{},
	arg_status interface{},
	arg_team_name interface{},
	arg_project_level interface{},
	arg_student_user_id_1 interface{},
	arg_student_user_id_2 interface{},
	arg_adviser_user_id interface{},
	arg_mentor_user_id interface{},
) FUNCTION_UPDATE_TEAM {
	f := FUNCTION_UPDATE_TEAM{FunctionInfo: &sq.FunctionInfo{
		Schema:    "app",
		Name:      "update_team",
		Arguments: []interface{}{arg_team_id, arg_status, arg_team_name, arg_project_level, arg_student_user_id_1, arg_student_user_id_2, arg_adviser_user_id, arg_mentor_user_id},
	}}
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_UPDATE_TEAM) As(alias string) FUNCTION_UPDATE_TEAM {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_UPSERT_APPLICATION_DATA references the app.upsert_application_data function.
type FUNCTION_UPSERT_APPLICATION_DATA struct {
	*sq.FunctionInfo
	APPLICATION_ID sq.NumberField
}

// UPSERT_APPLICATION_DATA creates an instance of the app.upsert_application_data function.
func UPSERT_APPLICATION_DATA(
	arg_user_role_id int,
	arg_applicant_data interface{},
	arg_application_data interface{},
) FUNCTION_UPSERT_APPLICATION_DATA {
	return UPSERT_APPLICATION_DATA_(arg_user_role_id, arg_applicant_data, arg_application_data)
}

// UPSERT_APPLICATION_DATA_ creates an instance of the app.upsert_application_data function.
func UPSERT_APPLICATION_DATA_(
	arg_user_role_id interface{},
	arg_applicant_data interface{},
	arg_application_data interface{},
) FUNCTION_UPSERT_APPLICATION_DATA {
	f := FUNCTION_UPSERT_APPLICATION_DATA{FunctionInfo: &sq.FunctionInfo{
		Schema:    "app",
		Name:      "upsert_application_data",
		Arguments: []interface{}{arg_user_role_id, arg_applicant_data, arg_application_data},
	}}
	f.APPLICATION_ID = sq.NewNumberField("_application_id", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_UPSERT_APPLICATION_DATA) As(alias string) FUNCTION_UPSERT_APPLICATION_DATA {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_UPSERT_EVALUATION references the app.upsert_evaluation function.
type FUNCTION_UPSERT_EVALUATION struct {
	*sq.FunctionInfo
	TEAM_EVALUATION_ID sq.NumberField
}

// UPSERT_EVALUATION creates an instance of the app.upsert_evaluation function.
func UPSERT_EVALUATION(
	arg_milestone string,
	arg_evaluator_team_id int,
	arg_evaluatee_submission_id int,
	arg_evaluation_data interface{},
) FUNCTION_UPSERT_EVALUATION {
	return UPSERT_EVALUATION_(arg_milestone, arg_evaluator_team_id, arg_evaluatee_submission_id, arg_evaluation_data)
}

// UPSERT_EVALUATION_ creates an instance of the app.upsert_evaluation function.
func UPSERT_EVALUATION_(
	arg_milestone interface{},
	arg_evaluator_team_id interface{},
	arg_evaluatee_submission_id interface{},
	arg_evaluation_data interface{},
) FUNCTION_UPSERT_EVALUATION {
	f := FUNCTION_UPSERT_EVALUATION{FunctionInfo: &sq.FunctionInfo{
		Schema:    "app",
		Name:      "upsert_evaluation",
		Arguments: []interface{}{arg_milestone, arg_evaluator_team_id, arg_evaluatee_submission_id, arg_evaluation_data},
	}}
	f.TEAM_EVALUATION_ID = sq.NewNumberField("_team_evaluation_id", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_UPSERT_EVALUATION) As(alias string) FUNCTION_UPSERT_EVALUATION {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_UPSERT_FORM references the app.upsert_form function.
type FUNCTION_UPSERT_FORM struct {
	*sq.FunctionInfo
	FORM_ID sq.NumberField
}

// UPSERT_FORM creates an instance of the app.upsert_form function.
func UPSERT_FORM(
	arg_period_id int,
	arg_cohort string,
	arg_stage string,
	arg_milestone string,
	arg_name string,
	arg_subsection string,
) FUNCTION_UPSERT_FORM {
	return UPSERT_FORM_(arg_period_id, arg_cohort, arg_stage, arg_milestone, arg_name, arg_subsection)
}

// UPSERT_FORM_ creates an instance of the app.upsert_form function.
func UPSERT_FORM_(
	arg_period_id interface{},
	arg_cohort interface{},
	arg_stage interface{},
	arg_milestone interface{},
	arg_name interface{},
	arg_subsection interface{},
) FUNCTION_UPSERT_FORM {
	f := FUNCTION_UPSERT_FORM{FunctionInfo: &sq.FunctionInfo{
		Schema:    "app",
		Name:      "upsert_form",
		Arguments: []interface{}{arg_period_id, arg_cohort, arg_stage, arg_milestone, arg_name, arg_subsection},
	}}
	f.FORM_ID = sq.NewNumberField("_form_id", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_UPSERT_FORM) As(alias string) FUNCTION_UPSERT_FORM {
	f.FunctionInfo.Alias = alias
	return f
}

// FUNCTION_UPSERT_SUBMISSION references the app.upsert_submission function.
type FUNCTION_UPSERT_SUBMISSION struct {
	*sq.FunctionInfo
	SUBMISSION_ID sq.NumberField
}

// UPSERT_SUBMISSION creates an instance of the app.upsert_submission function.
func UPSERT_SUBMISSION(
	arg_cohort string,
	arg_milestone string,
	arg_user_id int,
	arg_submission_data interface{},
) FUNCTION_UPSERT_SUBMISSION {
	return UPSERT_SUBMISSION_(arg_cohort, arg_milestone, arg_user_id, arg_submission_data)
}

// UPSERT_SUBMISSION_ creates an instance of the app.upsert_submission function.
func UPSERT_SUBMISSION_(
	arg_cohort interface{},
	arg_milestone interface{},
	arg_user_id interface{},
	arg_submission_data interface{},
) FUNCTION_UPSERT_SUBMISSION {
	f := FUNCTION_UPSERT_SUBMISSION{FunctionInfo: &sq.FunctionInfo{
		Schema:    "app",
		Name:      "upsert_submission",
		Arguments: []interface{}{arg_cohort, arg_milestone, arg_user_id, arg_submission_data},
	}}
	f.SUBMISSION_ID = sq.NewNumberField("_submission_id", f.FunctionInfo)
	return f
}

// As modifies the alias of the underlying function.
func (f FUNCTION_UPSERT_SUBMISSION) As(alias string) FUNCTION_UPSERT_SUBMISSION {
	f.FunctionInfo.Alias = alias
	return f
}
